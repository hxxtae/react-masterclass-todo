var a = 5;
function test() {
  console.log('1', a); // undefined (설명 참조)
  var a = 4;
  console.log('2', a); // 4
  a = 3;
  return () => {
    console.log('3', a); // 3
  }
}
test()();

// [ var 로 선언 시 undefined 가 나온 이유 ]
// console.log('1', a)에서
// 함수 밖에서 var a 와
// 함수 안에서 var a 가 선언 된 시점에
// 함수 안에서 var a 보다 위쪽에 먼저 선언되어있다.

// 해당 JavaScript 를 실행 시켜 보면
// 해당 변수는 호이스팅으로 전역 스코프 안에서 최상단으로, 함수 스코프 안에서 최상단으로 끌어 올려진다.
// 그런데 전역에서 선언한 a 변수와, 함수 안에서 선언한 a 변수의 이름이 같기 때문에
// console.log('1', a) 의 a 함수 안에 선언된 a 변수를 참조하게 된다.
// (함수 밖의 변수 a 는 신경 쓸 필요가 없다.)

// 이제 여기서 var의 경우 선언과 초기화를 동시에 수행하고, let 의 경우 선언만 먼저 수행한다.
// var 인 경우 선언과 초기화를 동시에 하기 때문에 console.log('1', a)는 undefined를 반환하게 되고,
// let 인 경우 선언과 초기화를 따로 수행하기 때문에 before initialization 라는 초기화가 수행하라는 에러 문구로 에러를 알려준다.

// -------------------------------------------------------------------------------------------------------------

// return () => { console.log('3', a)} 는 클로저 함수로 변수 a 는 함수 스코프의 변수를 참조하기 때문에 클로저 이다.

